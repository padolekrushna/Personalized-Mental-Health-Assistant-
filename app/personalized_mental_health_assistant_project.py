# -*- coding: utf-8 -*-
"""Personalized Mental Health Assistant Project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tIF7XlIZPkuvdcRhKuKq9jRDPX3sncR9
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.preprocessing import LabelEncoder
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, accuracy_score
from transformers import pipeline
import nltk
nltk.download('stopwords')
import nltk
nltk.download('wordnet')
# Load dataset
data = pd.read_excel("mental_health_assistant_dataset.xlsx", engine="openpyxl")



# Display dataset information
print(df.head())
print(df.info())

# Preprocess text data
def preprocess_text(text):
    import re
    from nltk.corpus import stopwords
    from nltk.stem import WordNetLemmatizer
    stop_words = set(stopwords.words('english'))
    lemmatizer = WordNetLemmatizer()

    # Clean text
    text = re.sub(r'http\S+', '', text)  # Remove URLs
    text = re.sub(r'[^\w\s]', '', text)  # Remove punctuation
    text = re.sub(r'\d+', '', text)  # Remove numbers
    text = text.lower()  # Convert to lowercase
    text = " ".join([lemmatizer.lemmatize(word) for word in text.split() if word not in stop_words])
    return text

# Apply preprocessing to the user queries
df['Processed_Text'] = df['User Query'].apply(preprocess_text)

# Feature extraction using TF-IDF
vectorizer = TfidfVectorizer(max_features=5000)
X = vectorizer.fit_transform(df['Processed_Text']).toarray()

# Encode target labels (Emotional State)
label_encoder = LabelEncoder()
df['Emotional_State_Encoded'] = label_encoder.fit_transform(df['Emotion'])

# Split the data
X_train, X_test, y_train, y_test = train_test_split(X, df['Emotional_State_Encoded'], test_size=0.2, random_state=42)

# Train an ML model (Random Forest for classification)
model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# Evaluate the model
y_pred = model.predict(X_test)
print("Classification Report:\n", classification_report(y_test, y_pred, target_names=label_encoder.classes_))
print("Accuracy Score:", accuracy_score(y_test, y_pred))

# Predict function
def predict_emotion(text_input):
    processed_input = preprocess_text(text_input)
    vectorized_input = vectorizer.transform([processed_input]).toarray()
    prediction = model.predict(vectorized_input)
    predicted_emotion = label_encoder.inverse_transform(prediction)[0]
    return predicted_emotion

# Example usage
example_query = "I feel like I’m drowning in work and can’t take it anymore."
predicted_emotion = predict_emotion(example_query)
print("Predicted Emotion:", predicted_emotion)

# Sentiment analysis using Hugging Face
sentiment_analyzer = pipeline("sentiment-analysis")
sentiment = sentiment_analyzer(example_query)
print("Sentiment Analysis Result:", sentiment)

# Generate response suggestions (basic rule-based)
def generate_response(emotion):
    responses = {
        "Happy": "That's great to hear! Keep up the positivity!",
        "Sad": "I'm sorry you're feeling this way. Would you like to talk more about it?",
        "Anxious": "It sounds like you're feeling anxious. Have you tried deep breathing exercises?",
        "Overwhelmed": "Take a deep breath. It’s okay to feel overwhelmed. Breaking tasks into smaller steps might help."
    }
    return responses.get(emotion, "I'm here to help. Tell me more about how you're feeling.")

response_suggestion = generate_response(predicted_emotion)
print("Suggested Response:", response_suggestion)

